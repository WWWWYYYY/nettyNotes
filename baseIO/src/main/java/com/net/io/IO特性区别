BIO出不了高并发，早期的tomcat就是使用BIO 伪异步的方式；会导致服务端内存、cpu消耗过大，因此在服务端不适用BIO编程模型而使用NIO、AIO，
但由于linux下异步IO并未完善，所以在编程方面要着重NIO，熟悉AIO，毕竟AIO是未来的趋势；而只有客户端才使用BIO。


netty5基于AIO开发
netty4基于NIO开发
但由于linux下异步IO并未完善netty5暂停开发，netty4正在开发

BIO重点API
Socket
ServerSocket

AIO重点API
CompletionHandler 操作系统调用该类中的方法通知应用程序 数据接收成功或者失败的结果，成功时调用complete，失败是调用failed，不论是读还是写都需要需要自己定义一个实现类，用来处理结果。
    void completed(V result, A attachment); result：结果；attachment附加参数
    void failed(Throwable exc, A attachment);

AsynchronousServerSocketChannel aio服务端
AsynchronousSocketChannel   aio客户端 AsynchronousSocketChannel.open()打开一个通道;connect(ipAndPort)进行连接；close()关闭连接
ByteBuffer 缓存区；应用不能直接把内容写入到通道里，必须通过ByteBuffer
        byte[] bytes = msg.getBytes();//把要写入的内容转变为bytes
        ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);//申请相应长度的直接内存空间
        writeBuffer.put(bytes);//放入内容
        writeBuffer.flip();//
        clientChannel.write(writeBuffer,writeBuffer, new AioClientWriteHandler(clientChannel,latch));//

AIO编程 接收信息和发送信息编码思路上不太一样。每当连接、读、写都有对应的CompletionHandler来监听。监听完成和失败的事件
AIO遗留问题 数据太长分多次发送怎么拼接多个内容。